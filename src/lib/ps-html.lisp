(in-package :parenscript)

(defvar *self-closing-tags-p* t)

(defun concat-constant-strings (str-list)
  (reverse (reduce (lambda (optimized-list next-obj)
                     (if (and (or (numberp next-obj) (stringp next-obj)) (stringp (car optimized-list)))
                         (cons (format nil "~a~a" (car optimized-list) next-obj) (cdr optimized-list))
                         (cons next-obj optimized-list)))
                   (cons () str-list))))

(defun process-html-forms-lhtml (forms)
  (let ((r ()))
    (labels ((process-form (form)
               (cond ((keywordp form) (push (format nil "<~A />" form) r))
                     ((atom form) (push form r))
                     ((and (consp form) (keywordp (car form)))
                      (push (format nil "<~A>" (car form)) r)
                      (map nil #'process-form (cdr form))
                      (push (format nil "</~A>" (car form)) r))
                     ((and (consp form) (consp (first form)) (keywordp (caar form)))
                      (push (format nil "<~A" (caar form)) r)
                      (loop with attrs = (cdar form)
                         while attrs
                         for attr-name = (pop attrs)
                         for attr-test = (when (not (keywordp attr-name))
                                           (let ((test attr-name))
                                             (setf attr-name (pop attrs))
                                             test))
                         for attr-val = (pop attrs)
                         do
                         (if attr-test
                             (push `(if ,attr-test
                                        (concat-string ,(format nil " ~A=\"" attr-name) ,attr-val "\"")
                                        "")
                                   r)
                             (progn
                               (push (format nil " ~A=\"" attr-name) r)
                               (push attr-val r)
                               (push "\"" r))))
                      (if (or (cdr form) (not *self-closing-tags-p*))
                          (progn (push ">" r)
                                 (map nil #'process-form (cdr form))
                                 (push (format nil "</~A>" (caar form)) r))
                          (push "/>" r)))
                     (t (push form r)))))
      (map nil #'process-form forms)
      (concat-constant-strings (reverse r)))))

(defun process-html-forms-cl-who (forms)
  (let ((r ()))
    (labels ((process-form (form)
               (cond ((keywordp form) (push (format nil "<~A />" form) r))
                     ((atom form) (push form r))
                     ((and (consp form) (keywordp (car form)))
                      (push (format nil "<~A" (car form)) r)
                      (labels ((process-attributes (el-body)
                                 (when el-body
                                   (if (or (consp (car el-body)) (= 1 (length el-body)))
                                       el-body
                                       (progn (push (format nil " ~A=\"" (car el-body)) r)
                                              (push (cadr el-body) r)
                                              (push "\"" r)
                                              (process-attributes (cddr el-body)))))))
                        (let ((content (process-attributes (cdr form))))
                          (if (or content (not *self-closing-tags-p*))
                              (progn (push ">" r)
                                     (when content (map nil #'process-form content))
                                     (push (format nil "</~A>" (car form)) r))
                              (push "/>" r)))))
                     (t (push form r)))))
      (map nil #'process-form forms)
      (concat-constant-strings (reverse r)))))

(defmacro+ps ps-html (&rest html-forms)
  `(concat-string ,@(process-html-forms-lhtml html-forms)))

(defmacro+ps who-ps-html (&rest html-forms)
  `(concat-string ,@(process-html-forms-cl-who html-forms)))
